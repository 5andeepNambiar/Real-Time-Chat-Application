{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sande\\\\Desktop\\\\EI STUDY\\\\demo\\\\Realtime-chat-app-with-rooms\\\\client\\\\src\\\\pages\\\\chat\\\\messages.js\",\n    _s = $RefreshSig$();\n\nimport styles from './styles.module.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = _ref => {\n  _s();\n\n  let {\n    socket\n  } = _ref;\n  const [messagesRecieved, setMessagesReceived] = useState([]);\n  const messagesColumnRef = useRef(null); // Runs whenever a socket event is recieved from the server\n\n  useEffect(() => {\n    socket.on('receive_message', data => {\n      console.log(data);\n      setMessagesReceived(state => [...state, {\n        message: data.message,\n        username: data.username,\n        __createdtime__: data.__createdtime__\n      }]);\n    }); // Remove event listener on component unmount\n\n    return () => socket.off('receive_message');\n  }, [socket]);\n  useEffect(() => {\n    // Last 100 messages sent in the chat room (fetched from the db in backend)\n    socket.on('last_100_messages', last100Messages => {\n      console.log('Last 100 messages:', JSON.parse(last100Messages));\n      last100Messages = JSON.parse(last100Messages); // Sort these messages by __createdtime__\n\n      last100Messages = sortMessagesByDate(last100Messages);\n      setMessagesReceived(state => [...last100Messages, ...state]);\n    });\n    return () => socket.off('last_100_messages');\n  }, [socket]); // Scroll to the most recent message\n\n  useEffect(() => {\n    messagesColumnRef.current.scrollTop = messagesColumnRef.current.scrollHeight;\n  }, [messagesRecieved]);\n\n  function sortMessagesByDate(messages) {\n    return messages.sort((a, b) => parseInt(a.__createdtime__) - parseInt(b.__createdtime__));\n  } // dd/mm/yyyy, hh:mm:ss\n\n\n  function formatDateFromTimestamp(timestamp) {\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.messagesColumn,\n    ref: messagesColumnRef,\n    children: messagesRecieved.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.message,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.msgMeta,\n          children: msg.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.msgMeta,\n          children: formatDateFromTimestamp(msg.__createdtime__)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.msgText,\n        children: msg.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Messages, \"ESmPED3PQJsHe3CjTji7pXxvB5Y=\");\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["styles","useState","useEffect","useRef","Messages","socket","messagesRecieved","setMessagesReceived","messagesColumnRef","on","data","console","log","state","message","username","__createdtime__","off","last100Messages","JSON","parse","sortMessagesByDate","current","scrollTop","scrollHeight","messages","sort","a","b","parseInt","formatDateFromTimestamp","timestamp","date","Date","toLocaleString","messagesColumn","map","msg","i","display","justifyContent","msgMeta","msgText"],"sources":["C:/Users/sande/Desktop/EI STUDY/demo/Realtime-chat-app-with-rooms/client/src/pages/chat/messages.js"],"sourcesContent":["import styles from './styles.module.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nconst Messages = ({ socket }) => {\r\n  const [messagesRecieved, setMessagesReceived] = useState([]);\r\n\r\n  const messagesColumnRef = useRef(null);\r\n\r\n  // Runs whenever a socket event is recieved from the server\r\n  useEffect(() => {\r\n    socket.on('receive_message', (data) => {\r\n      console.log(data);\r\n      setMessagesReceived((state) => [\r\n        ...state,\r\n        {\r\n          message: data.message,\r\n          username: data.username,\r\n          __createdtime__: data.__createdtime__,\r\n        },\r\n      ]);\r\n    });\r\n\r\n    // Remove event listener on component unmount\r\n    return () => socket.off('receive_message');\r\n  }, [socket]);\r\n\r\n  useEffect(() => {\r\n    // Last 100 messages sent in the chat room (fetched from the db in backend)\r\n    socket.on('last_100_messages', (last100Messages) => {\r\n      console.log('Last 100 messages:', JSON.parse(last100Messages));\r\n      last100Messages = JSON.parse(last100Messages);\r\n      // Sort these messages by __createdtime__\r\n      last100Messages = sortMessagesByDate(last100Messages);\r\n      setMessagesReceived((state) => [...last100Messages, ...state]);\r\n    });\r\n\r\n    return () => socket.off('last_100_messages');\r\n  }, [socket]);\r\n\r\n  // Scroll to the most recent message\r\n  useEffect(() => {\r\n    messagesColumnRef.current.scrollTop =\r\n      messagesColumnRef.current.scrollHeight;\r\n  }, [messagesRecieved]);\r\n\r\n  function sortMessagesByDate(messages) {\r\n    return messages.sort(\r\n      (a, b) => parseInt(a.__createdtime__) - parseInt(b.__createdtime__)\r\n    );\r\n  }\r\n\r\n  // dd/mm/yyyy, hh:mm:ss\r\n  function formatDateFromTimestamp(timestamp) {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleString();\r\n  }\r\n\r\n  return (\r\n    <div className={styles.messagesColumn} ref={messagesColumnRef}>\r\n      {messagesRecieved.map((msg, i) => (\r\n        <div className={styles.message} key={i}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <span className={styles.msgMeta}>{msg.username}</span>\r\n            <span className={styles.msgMeta}>\r\n              {formatDateFromTimestamp(msg.__createdtime__)}\r\n            </span>\r\n          </div>\r\n          <p className={styles.msgText}>{msg.message}</p>\r\n          <br />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}